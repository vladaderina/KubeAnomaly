postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.2.0-debian-12-r10
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-creds
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    readinessProbe:
      initialDelaySeconds: 15
    livenessProbe:
      initialDelaySeconds: 15
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          CREATE DATABASE grafana;
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          GRANT CONNECT, TEMPORARY ON DATABASE grafana TO grafana;
          GRANT USAGE, CREATE ON SCHEMA public TO grafana;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public 
          GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO grafana;
          CREATE DATABASE ml_models;
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';
          GRANT CONNECT, TEMPORARY ON DATABASE ml_models TO mad;
          \connect ml_models
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE SCHEMA modeling AUTHORIZATION mad;
          GRANT ALL ON SCHEMA modeling TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON TABLES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON SEQUENCES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT EXECUTE ON FUNCTIONS TO mad;

          -- Создание таблиц
          -- ============================
          -- Таблица: models
          -- ============================
          CREATE TABLE models (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              model_data BYTEA NOT NULL,
              created_at TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              last_updated TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              hyperparams JSONB NOT NULL,
              status VARCHAR(255) NOT NULL,
              version VARCHAR(255) NOT NULL
          );

          -- ============================
          -- Таблица: metrics
          -- ============================
          CREATE TABLE metrics (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              metric_type VARCHAR(255) NOT NULL,
              start_monitoring TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              end_monitoring TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              step INTEGER NOT NULL,
              status VARCHAR(255) NOT NULL
          );

          -- ============================
          -- Таблица: request
          -- ============================
          CREATE TABLE request (
              id SERIAL PRIMARY KEY,
              query_text TEXT NOT NULL
          );

          -- ============================
          -- Таблица: metric_requests
          -- ============================
          CREATE TABLE metric_requests (
              id SERIAL PRIMARY KEY,
              request_id INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT metric_requests_request_id_fk FOREIGN KEY (request_id) REFERENCES request(id),
              CONSTRAINT metric_requests_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          -- ============================
          -- Таблица: anomaly_points
          -- ============================
          CREATE TABLE anomaly_points (
              id SERIAL PRIMARY KEY,
              metric_id INTEGER NOT NULL,
              timestamp TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              model_id INTEGER NOT NULL,
              CONSTRAINT anomaly_points_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id),
              CONSTRAINT anomaly_points_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id)
          );

          -- ============================
          -- Таблица: anomaly_system
          -- ============================
          CREATE TABLE anomaly_system (
              id SERIAL PRIMARY KEY,
              start_time TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              end_time TIMESTAMP(0) WITH TIME ZONE NOT NULL,
              anomaly_type VARCHAR(255) NOT NULL,
              status VARCHAR(255) NOT NULL,
              average_anom_score INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT anomaly_system_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          -- ============================
          -- Таблица: metric_models
          -- ============================
          CREATE TABLE metric_models (
              id SERIAL PRIMARY KEY,
              model_id INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT metric_models_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id),
              CONSTRAINT metric_models_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          -- Создание индексов
          CREATE INDEX IF NOT EXISTS idx_models_name ON modeling.models (name);
          CREATE INDEX IF NOT EXISTS idx_models_created_at ON modeling.models (created_at);

          -- Создание функций и триггеров
          CREATE OR REPLACE FUNCTION notify_new_metric() RETURNS trigger AS $$
          BEGIN
            IF NEW.is_active = true THEN
              PERFORM pg_notify('new_active_metric', NEW.id::text);
            END IF;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE TRIGGER active_metric_trigger
          AFTER INSERT OR UPDATE ON metrics
          FOR EACH ROW EXECUTE FUNCTION notify_new_metric();