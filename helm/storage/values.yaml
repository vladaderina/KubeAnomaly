postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.2.0-debian-12-r10
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-creds
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    readinessProbe:
      initialDelaySeconds: 15
    livenessProbe:
      initialDelaySeconds: 15
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          CREATE DATABASE grafana;
          CREATE DATABASE ml_models;

        02-roles-db.sql: |-
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';
          GRANT CONNECT ON DATABASE grafana TO grafana;
          GRANT ALL PRIVILEGES ON DATABASE ml_models TO mad;

        03-ml-models-init.sql: |-
          \connect ml_models
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          ALTER SCHEMA public OWNER TO mad;

        04-create-tables.sql: |-
          \connect ml_models
          -- Таблица метрик
          CREATE TABLE metrics (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              status VARCHAR(20) NOT NULL CHECK (status IN ('active', 'deactive')),
              query TEXT NOT NULL,
              step INTEGER NOT NULL DEFAULT 60
          );

          -- Таблица с информацией о моделях
          CREATE TABLE models_info (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              max_stored_versions INTEGER NOT NULL DEFAULT 3,
              hyperparams_mode VARCHAR(20) NOT NULL CHECK (hyperparams_mode IN ('manual', 'optuna')),
              active_version VARCHAR(255),
              training_start TIMESTAMP WITH TIME ZONE NOT NULL,
              training_end TIMESTAMP WITH TIME ZONE NOT NULL
          );

          -- Таблица моделей
          CREATE TABLE models (
              id SERIAL PRIMARY KEY,
              model_data BYTEA NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
              status VARCHAR(20) NOT NULL CHECK (status IN ('active', 'deactive', 'training', 'waiting')),
              version VARCHAR(255) NOT NULL DEFAULT '1',
              model_id INTEGER NOT NULL REFERENCES models(id) ON DELETE CASCADE,
              hyperparams JSONB NOT NULL
          );

          -- Таблица аномальных точек
          CREATE TABLE anomaly_points (
              id SERIAL PRIMARY KEY,
              model_version_id INTEGER NOT NULL REFERENCES models_version(id) ON DELETE CASCADE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              timestamp TIMESTAMP WITH TIME ZONE NOT NULL
          );

          -- Таблица системных аномалий
          CREATE TABLE anomaly_system (
              id SERIAL PRIMARY KEY,
              start_time TIMESTAMP WITH TIME ZONE NOT NULL,
              end_time TIMESTAMP WITH TIME ZONE,
              anomaly_type VARCHAR(20) NOT NULL CHECK (anomaly_type IN ('local', 'group', 'global')),
              average_anom_score INTEGER NOT NULL,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              description VARCHAR(255) NOT NULL DEFAULT 'Detected by MAD'
          );

          -- Связующая таблица моделей и метрик
          CREATE TABLE features (
              model_id INTEGER NOT NULL REFERENCES models(id) ON DELETE CASCADE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              PRIMARY KEY (model_id, metric_id)
          );

          -- Таблица шаблонов оповещений
          CREATE TABLE alert_templates (
              id SERIAL PRIMARY KEY,
              type VARCHAR(20) NOT NULL CHECK (type IN ('local', 'group', 'global')),
              message VARCHAR(255) NOT NULL
          );

        05-create-indexes.sql: |-
          \connect ml_models
          CREATE INDEX idx_metrics_status ON metrics (status);
          CREATE INDEX idx_models_status ON models (status);
          CREATE INDEX idx_models_active_version ON models (active_version);
          CREATE INDEX idx_models_version_model_id ON models_version (model_id);
          CREATE INDEX idx_anomaly_points_timestamp ON anomaly_points (timestamp);
          CREATE INDEX idx_anomaly_system_metric_id ON anomaly_system (metric_id);

        06-create-trigger.sql: |-
          \connect ml_models
          CREATE OR REPLACE FUNCTION notify_model_status_change()
          RETURNS trigger AS $$
          BEGIN
            IF NEW.status = 'waiting' THEN
              PERFORM pg_notify('model_training_queue', NEW.id::text);
            END IF;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE TRIGGER model_training_trigger
          AFTER INSERT OR UPDATE OF status ON models
          FOR EACH ROW EXECUTE FUNCTION notify_model_status_change();

        07-primary-key.sql: |-
          \connect ml_models
          ALTER TABLE
              "models_info" ADD PRIMARY KEY("id");
          ALTER TABLE
              "anomaly_points" ADD CONSTRAINT "anomaly_points_model_version_id_foreign" FOREIGN KEY("model_version_id") REFERENCES "models"("id");
          ALTER TABLE
              "anomaly_points" ADD CONSTRAINT "anomaly_points_metric_id_foreign" FOREIGN KEY("metric_id") REFERENCES "metrics"("id");
          ALTER TABLE
              "models_info" ADD CONSTRAINT "models_info_active_version_foreign" FOREIGN KEY("active_version") REFERENCES "models"("version");
          ALTER TABLE
              "anomaly_system" ADD CONSTRAINT "anomaly_system_metric_id_foreign" FOREIGN KEY("metric_id") REFERENCES "metrics"("id");
          ALTER TABLE
              "models_info" ADD CONSTRAINT "models_info_metric_id_foreign" FOREIGN KEY("metric_id") REFERENCES "metrics"("id");
          ALTER TABLE
              "features" ADD CONSTRAINT "features_model_id_foreign" FOREIGN KEY("model_id") REFERENCES "models_info"("id");
          ALTER TABLE
              "features" ADD CONSTRAINT "features_metric_id_foreign" FOREIGN KEY("metric_id") REFERENCES "metrics"("id");
          ALTER TABLE
              "models" ADD CONSTRAINT "models_model_id_foreign" FOREIGN KEY("model_id") REFERENCES "models_info"("id");
