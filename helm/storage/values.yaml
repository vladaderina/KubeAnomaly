postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.2.0-debian-12-r10
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-creds
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    readinessProbe:
      initialDelaySeconds: 15
    livenessProbe:
      initialDelaySeconds: 15
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          -- Создание БД
          CREATE DATABASE grafana;
          CREATE DATABASE ml_models;

          -- Создание ролей
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';

          -- Права на БД
          GRANT CONNECT, TEMPORARY ON DATABASE grafana TO grafana;
          GRANT CONNECT, TEMPORARY ON DATABASE ml_models TO mad;

          -- Подключение к ml_models
          \connect ml_models

          -- Расширения
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

          -- Убедимся, что mad владеет public-схемой (по умолчанию это postgres)
          ALTER SCHEMA public OWNER TO mad;

          -- Права на схему public
          GRANT USAGE ON SCHEMA public TO grafana;
          GRANT ALL ON SCHEMA public TO mad;

          -- Будущие права
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO grafana;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT EXECUTE ON FUNCTIONS TO mad;

          -- ===========================
          -- Таблицы (в схеме public)
          -- ===========================

          -- Таблица метрик
          CREATE TABLE "metrics" (
              "id" SERIAL PRIMARY KEY,
              "name" VARCHAR(255) NOT NULL,
              "status" VARCHAR(20) NOT NULL CHECK ("status" IN ('active', 'deactive')),
              "query" TEXT NOT NULL,
              "step" INTEGER NOT NULL DEFAULT '60'
          );

          -- Таблица моделей
          CREATE TABLE "models" (
              "id" SERIAL PRIMARY KEY,
              "name" VARCHAR(255) NOT NULL,
              "max_stored_versions" INTEGER NOT NULL DEFAULT 3,
              "hyperparams_mode" VARCHAR(20) NOT NULL CHECK ("hyperparameter_mode" IN ('manual', 'optuna')),
              "status" VARCHAR(20) NOT NULL CHECK ("status" IN ('active', 'deactive', 'training', 'waiting')),
              "active_version" VARCHAR(255) NOT NULL,
              "training_start" TIMESTAMP WITH TIME ZONE NOT NULL,
              "training_end" TIMESTAMP WITH TIME ZONE NOT NULL
          );

          -- Таблица версий моделей
          CREATE TABLE "models_version" (
              "id" SERIAL PRIMARY KEY,
              "model_data" BYTEA NOT NULL,
              "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
              "version" VARCHAR(255) NOT NULL DEFAULT '1',
              "model_id" INTEGER NOT NULL REFERENCES "models"("id") ON DELETE CASCADE,
              "hyperparams" JSONB NOT NULL
          );

          -- Таблица аномальных точек
          CREATE TABLE "anomaly_points" (
              "id" SERIAL PRIMARY KEY,
              "model_version_id" INTEGER NOT NULL REFERENCES "models_version"("id") ON DELETE CASCADE,
              "metric_id" INTEGER NOT NULL REFERENCES "metrics"("id") ON DELETE CASCADE,
              "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL
          );

          -- Таблица системных аномалий
          CREATE TABLE "anomaly_system" (
              "id" SERIAL PRIMARY KEY,
              "start_time" TIMESTAMP WITH TIME ZONE NOT NULL,
              "end_time" TIMESTAMP WITH TIME ZONE,
              "anomaly_type" VARCHAR(20) NOT NULL CHECK ("anomaly_type" IN ('local', 'group', 'global')),
              "average_anom_score" INTEGER NOT NULL,
              "metric_id" INTEGER NOT NULL REFERENCES "metrics"("id") ON DELETE CASCADE,
              "description" VARCHAR(255) NOT NULL DEFAULT 'Detected by MAD'
          );

          -- Связующая таблица моделей и метрик
          CREATE TABLE "features" (
              "model_id" INTEGER NOT NULL REFERENCES "models"("id") ON DELETE CASCADE,
              "metric_id" INTEGER NOT NULL REFERENCES "metrics"("id") ON DELETE CASCADE,
              PRIMARY KEY ("model_id", "metric_id")
          );

          -- Таблица шаблонов оповещений
          CREATE TABLE "alert_templates" (
              "id" SERIAL PRIMARY KEY,
              "type" VARCHAR(20) NOT NULL CHECK ("type" IN ('local', 'group', 'global')),
              "message" VARCHAR(255) NOT NULL
          );

          -- Создание индексов
          CREATE INDEX idx_metrics_status ON "metrics" ("status");
          CREATE INDEX idx_models_status ON "models" ("status");
          CREATE INDEX idx_models_active_version ON "models" ("active_version");
          CREATE INDEX idx_models_version_model_id ON "models_version" ("model_id");
          CREATE INDEX idx_models_version_created_at ON "models_version" ("created_at");
          CREATE INDEX idx_anomaly_points_timestamp ON "anomaly_points" ("timestamp");
          CREATE INDEX idx_anomaly_points_model_version_id ON "anomaly_points" ("model_version_id");
          CREATE INDEX idx_anomaly_points_metric_id ON "anomaly_points" ("metric_id");
          CREATE INDEX idx_anomaly_system_metric_id ON "anomaly_system" ("metric_id");
          CREATE INDEX idx_anomaly_system_anomaly_type ON "anomaly_system" ("anomaly_type");
          CREATE INDEX idx_anomaly_system_timestamp_range ON "anomaly_system" ("start_time", "end_time");

          -- Функция уведомления
          CREATE OR REPLACE FUNCTION notify_new_model()
          RETURNS trigger AS $$
          BEGIN
            IF NEW.status = 'waiting' THEN
              PERFORM pg_notify('new_active_model', NEW.id::text);
            END IF;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql SECURITY DEFINER;

          -- Триггер
          CREATE TRIGGER active_model_trigger
          AFTER INSERT OR UPDATE ON models
          FOR EACH ROW EXECUTE FUNCTION notify_new_model();

          -- ===============================
          -- Явная выдача прав
          -- ===============================

          -- grafana только на чтение
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;

          -- mad может всё (на всякий случай дублируем)
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mad;
          GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO mad;
          GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO mad;

