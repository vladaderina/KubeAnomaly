postgresql:
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          CREATE DATABASE grafana;
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          GRANT CONNECT, TEMPORARY ON DATABASE grafana TO grafana;
          GRANT USAGE, CREATE ON SCHEMA public TO grafana;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public 
          GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO grafana;
          CREATE DATABASE ml_models;
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';
          GRANT CONNECT, TEMPORARY ON DATABASE ml_models TO mad;
          \connect ml_models
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE SCHEMA modeling AUTHORIZATION mad;
          GRANT ALL ON SCHEMA modeling TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON TABLES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON SEQUENCES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT EXECUTE ON FUNCTIONS TO mad;

          -- Создание таблицы моделей
          CREATE TABLE IF NOT EXISTS modeling.models (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            name TEXT NOT NULL,
            labels JSONB NOT NULL,
            config JSONB NOT NULL,
            history JSONB NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT now(),
            updated_at TIMESTAMP NOT NULL DEFAULT now()
          );

          -- Создание индексов
          CREATE INDEX IF NOT EXISTS idx_models_name ON modeling.models (name);
          CREATE INDEX IF NOT EXISTS idx_models_created_at ON modeling.models (created_at);

          -- Триггер для обновления updated_at
          CREATE OR REPLACE FUNCTION update_timestamp()
          RETURNS TRIGGER AS $$
          BEGIN
            NEW.updated_at = now();
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE OR REPLACE TRIGGER update_models_timestamp
          BEFORE UPDATE ON modeling.models
          FOR EACH ROW EXECUTE FUNCTION update_timestamp();

          RAISE NOTICE 'ML models database setup completed';