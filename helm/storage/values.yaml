postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.2.0-debian-12-r10
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-creds
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    readinessProbe:
      initialDelaySeconds: 15
    livenessProbe:
      initialDelaySeconds: 15
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          -- Создание БД
          CREATE DATABASE grafana;
          CREATE DATABASE ml_models;

          -- Создание ролей
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';

          -- Права на БД
          GRANT CONNECT, TEMPORARY ON DATABASE grafana TO grafana;
          GRANT CONNECT, TEMPORARY ON DATABASE ml_models TO mad;

          -- Подключение к ml_models
          \connect ml_models

          -- Расширения
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

          -- Убедимся, что mad владеет public-схемой (по умолчанию это postgres)
          ALTER SCHEMA public OWNER TO mad;

          -- Права на схему public
          GRANT USAGE ON SCHEMA public TO grafana;
          GRANT ALL ON SCHEMA public TO mad;

          -- Будущие права
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO grafana;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT EXECUTE ON FUNCTIONS TO mad;

          -- ===========================
          -- Таблицы (в схеме public)
          -- ===========================

          CREATE TABLE models (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              model_data BYTEA NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE NOT NULL,
              last_updated TIMESTAMP WITH TIME ZONE NOT NULL,
              hyperparams JSONB NOT NULL,
              status VARCHAR(255) NOT NULL,
              version VARCHAR(255) NOT NULL
          );

          CREATE TABLE metrics (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              metric_type VARCHAR(255) NOT NULL,
              start_monitoring TIMESTAMP WITH TIME ZONE NOT NULL,
              end_monitoring TIMESTAMP WITH TIME ZONE NOT NULL,
              step INTEGER NOT NULL,
              status VARCHAR(255) NOT NULL
          );

          CREATE TABLE request (
              id SERIAL PRIMARY KEY,
              query_text TEXT NOT NULL
          );

          CREATE TABLE metric_requests (
              id SERIAL PRIMARY KEY,
              request_id INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT metric_requests_request_id_fk FOREIGN KEY (request_id) REFERENCES request(id),
              CONSTRAINT metric_requests_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          CREATE TABLE anomaly_points (
              id SERIAL PRIMARY KEY,
              metric_id INTEGER NOT NULL,
              timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
              model_id INTEGER NOT NULL,
              CONSTRAINT anomaly_points_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id),
              CONSTRAINT anomaly_points_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id)
          );

          CREATE TABLE anomaly_system (
              id SERIAL PRIMARY KEY,
              start_time TIMESTAMP WITH TIME ZONE NOT NULL,
              end_time TIMESTAMP WITH TIME ZONE NOT NULL,
              anomaly_type VARCHAR(255) NOT NULL,
              status VARCHAR(255) NOT NULL,
              average_anom_score INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT anomaly_system_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          CREATE TABLE metric_models (
              id SERIAL PRIMARY KEY,
              model_id INTEGER NOT NULL,
              metric_id INTEGER NOT NULL,
              CONSTRAINT metric_models_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id),
              CONSTRAINT metric_models_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
          );

          -- Индексы
          CREATE INDEX IF NOT EXISTS idx_models_name ON models (name);
          CREATE INDEX IF NOT EXISTS idx_models_created_at ON models (created_at);

          -- Функция уведомления
          CREATE OR REPLACE FUNCTION notify_new_metric()
          RETURNS trigger AS $$
          BEGIN
            IF NEW.status = 'active' THEN
              PERFORM pg_notify('new_active_metric', NEW.id::text);
            END IF;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql SECURITY DEFINER;

          -- Триггер
          CREATE TRIGGER active_metric_trigger
          AFTER INSERT OR UPDATE ON metrics
          FOR EACH ROW EXECUTE FUNCTION notify_new_metric();

          -- ===============================
          -- Явная выдача прав
          -- ===============================

          -- grafana только на чтение
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;

          -- mad может всё (на всякий случай дублируем)
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mad;
          GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO mad;
          GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO mad;
