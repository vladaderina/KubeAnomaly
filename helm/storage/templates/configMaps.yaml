apiVersion: v1
kind: ConfigMap
metadata:
  name: init-scripts
  labels:
    app: postgresql
data:
  01-create-grafana.sql: |-
    CREATE DATABASE grafana;
    CREATE ROLE grafana WITH LOGIN PASSWORD 'grafana';
    GRANT CONNECT, TEMPORARY ON DATABASE grafana TO grafana;
    GRANT USAGE, CREATE ON SCHEMA public TO grafana;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO grafana;

  02-create-ml-db.sql: |-
    CREATE DATABASE ml_models;
    CREATE ROLE mad WITH LOGIN PASSWORD 'mad';
    GRANT CONNECT, TEMPORARY ON DATABASE ml_models TO mad;

  03-ml-models-init.sql: |-
    \connect ml_models
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE SCHEMA modeling AUTHORIZATION mad;
    GRANT ALL ON SCHEMA modeling TO mad;
    ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON TABLES TO mad;
    ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT ALL PRIVILEGES ON SEQUENCES TO mad;
    ALTER DEFAULT PRIVILEGES IN SCHEMA modeling GRANT EXECUTE ON FUNCTIONS TO mad;

  04-create-models-table.sql: |-
    \connect ml_models
    CREATE TABLE models (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        model_data BYTEA NOT NULL,
        created_at TIMESTAMP(0) WITH TIME ZONE NOT NULL,
        last_updated TIMESTAMP(0) WITH TIME ZONE NOT NULL,
        hyperparams JSONB NOT NULL,
        status VARCHAR(255) NOT NULL,
        version VARCHAR(255) NOT NULL
    );
    CREATE TABLE metrics (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        metric_type VARCHAR(255) NOT NULL,
        is_active BOOLEAN NOT NULL
    );
    CREATE TABLE request (
        id SERIAL PRIMARY KEY,
        query_text TEXT NOT NULL
    );
    CREATE TABLE metric_requests (
        id SERIAL PRIMARY KEY,
        request_id INTEGER NOT NULL,
        metric_id INTEGER NOT NULL,
        CONSTRAINT metric_requests_request_id_fk FOREIGN KEY (request_id) REFERENCES request(id),
        CONSTRAINT metric_requests_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
    );
    CREATE TABLE anomaly_points (
        id SERIAL PRIMARY KEY,
        metric_id INTEGER NOT NULL,
        timestamp TIMESTAMP(0) WITH TIME ZONE NOT NULL,
        model_id INTEGER NOT NULL,
        CONSTRAINT anomaly_points_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id),
        CONSTRAINT anomaly_points_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id)
    );
    CREATE TABLE anomaly_system (
        id SERIAL PRIMARY KEY,
        start_time TIMESTAMP(0) WITH TIME ZONE NOT NULL,
        end_time TIMESTAMP(0) WITH TIME ZONE NOT NULL,
        anomaly_type VARCHAR(255) NOT NULL,
        status VARCHAR(255) NOT NULL,
        average_anom_score INTEGER NOT NULL,
        metric_id INTEGER NOT NULL,
        CONSTRAINT anomaly_system_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
    );
    CREATE TABLE metric_models (
        id SERIAL PRIMARY KEY,
        model_id INTEGER NOT NULL,
        metric_id INTEGER NOT NULL,
        CONSTRAINT metric_models_model_id_fk FOREIGN KEY (model_id) REFERENCES models(id),
        CONSTRAINT metric_models_metric_id_fk FOREIGN KEY (metric_id) REFERENCES metrics(id)
    );

  05-create-indexes.sql: |-
    \connect ml_models
    CREATE INDEX IF NOT EXISTS idx_models_name ON modeling.models (name);
    CREATE INDEX IF NOT EXISTS idx_models_created_at ON modeling.models (created_at);